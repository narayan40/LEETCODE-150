/*class Solution {
public:
  First approach
    vector<int> productExceptSelf(vector<int>& nums) {
       vector<int>left;
       int pr=1;
       for(int i=0;i<nums.size();i++){
        pr*=nums[i];
        left.push_back(pr);
       } 
       pr=1;
       vector<int> ans(nums.size(),1);
       int n=nums.size()-1;
       ans[n]=left[n-1];
       pr*=nums[n];
       for(int i=n-1;i>0;i--){
        ans[i]=left[i-1]*pr;
        pr*=nums[i];
       }
       ans[0]=pr;
       return ans;
    }
};*/
class Solution {
//Second approach
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n, 1);

        // Pass 1: Compute left products and store in ans
        int left = 1;
        for (int i = 0; i < n; i++) {
            ans[i] = left;
            left *= nums[i];
        }

        // Pass 2: Multiply with right products
        int right = 1;
        for (int i = n - 1; i >= 0; i--) {
            ans[i] *= right;
            right *= nums[i];
        }

        return ans;
    }
};
